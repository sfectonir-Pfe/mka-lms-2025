import { Injectable, NotFoundException } from '@nestjs/common';
import { PrismaService } from 'nestjs-prisma';
import { CreateR√©clamationDto, ReclamationStatus } from './dto/create-r√©clamation.dto';
import { UpdateR√©clamationDto } from './dto/update-r√©clamation.dto';
import { MailService } from '../mail/mail.service';

@Injectable()
export class R√©clamationService {
  constructor(
    private prisma: PrismaService,
    private mailService: MailService
  ) {}

  async create(createR√©clamationDto: CreateR√©clamationDto) {
    return this.prisma.reclamation.create({
      data: createR√©clamationDto,
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    });
  }

  async findAll() {
    return this.prisma.reclamation.findMany({
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
  }

  async findOne(id: number) {
    const reclamation = await this.prisma.reclamation.findUnique({
      where: { id },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    });

    if (!reclamation) {
      throw new NotFoundException(`R√©clamation with ID ${id} not found`);
    }

    return reclamation;
  }

  async update(id: number, updateR√©clamationDto: UpdateR√©clamationDto) {
    const existingReclamation = await this.prisma.reclamation.findUnique({
      where: { id },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    });

    if (!existingReclamation) {
      throw new NotFoundException(`R√©clamation with ID ${id} not found`);
    }

    const updateData: any = { ...updateR√©clamationDto };
    
    // If response is being added, set responseDate
    if (updateR√©clamationDto.response && !existingReclamation.response) {
      updateData.responseDate = new Date();
    }

    // Check if status is being changed to RESOLU
    const isStatusChangedToResolved = 
      updateR√©clamationDto.status === ReclamationStatus.RESOLU && 
      existingReclamation.status !== ReclamationStatus.RESOLU;

    console.log(`üîç V√©rification du changement de statut pour la r√©clamation ${id}:`);
    console.log(`   - Ancien statut: ${existingReclamation.status}`);
    console.log(`   - Nouveau statut: ${updateR√©clamationDto.status}`);
    console.log(`   - Changement vers RESOLU: ${isStatusChangedToResolved}`);

    const updatedReclamation = await this.prisma.reclamation.update({
      where: { id },
      data: updateData,
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    });

    console.log(`üìß Informations utilisateur pour l'email:`);
    console.log(`   - Email: ${updatedReclamation.user?.email}`);
    console.log(`   - Nom: ${updatedReclamation.user?.name}`);
    console.log(`   - Sujet: ${updatedReclamation.subject}`);
    console.log(`   - R√©ponse: ${updatedReclamation.response}`);

    // Send email notification if status changed to RESOLU
    if (isStatusChangedToResolved && updatedReclamation.user?.email && updatedReclamation.user?.name) {
      console.log(`üöÄ Tentative d'envoi d'email de r√©solution...`);
      try {
        await this.mailService.sendReclamationResolvedEmail(
          updatedReclamation.user.email,
          updatedReclamation.user.name,
          updatedReclamation.subject,
          updatedReclamation.response ? updatedReclamation.response : undefined
        );
        console.log(`‚úÖ Email de r√©solution envoy√© avec succ√®s √† ${updatedReclamation.user.email} pour la r√©clamation ${id}`);
      } catch (error) {
        console.error(`‚ùå Erreur lors de l'envoi de l'email de r√©solution pour la r√©clamation ${id}:`, error);
        console.error(`   - D√©tails de l'erreur:`, error.message);
        console.error(`   - Stack trace:`, error.stack);
        // Ne pas faire √©chouer la mise √† jour si l'email ne peut pas √™tre envoy√©
      }
    } else {
      console.log(`‚ö†Ô∏è Conditions non remplies pour l'envoi d'email:`);
      console.log(`   - Changement vers RESOLU: ${isStatusChangedToResolved}`);
      console.log(`   - Email utilisateur: ${!!updatedReclamation.user?.email}`);
      console.log(`   - Nom utilisateur: ${!!updatedReclamation.user?.name}`);
    }

    return updatedReclamation;
  }

  async remove(id: number) {
    const existingReclamation = await this.prisma.reclamation.findUnique({
      where: { id }
    });

    if (!existingReclamation) {
      throw new NotFoundException(`R√©clamation with ID ${id} not found`);
    }

    return this.prisma.reclamation.delete({
      where: { id }
    });
  }

  async findByUserId(userId: number) {
    return this.prisma.reclamation.findMany({
      where: { userId },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
  }

  async findByStatus(status: string) {
    return this.prisma.reclamation.findMany({
      where: { status: status as ReclamationStatus },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
  }
}
